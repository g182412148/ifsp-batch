import com.ruim.ifsp.utils.client.http.IfspHttpClientUtil;
import com.ruim.ifsp.utils.message.IfspFastJsonUtil;
import com.scrcu.ebank.ebap.batch.bean.request.GetFileNameRequest;
import com.scrcu.ebank.ebap.batch.bean.request.OfflineCreatMerChkFileRequest;
import com.scrcu.ebank.ebap.batch.common.constant.Constans;
import com.scrcu.ebank.ebap.batch.common.utils.DubboServiceUtil;
import com.scrcu.ebank.ebap.batch.dao.BthMerInAccDao;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 描述 </br>
 *
 * @author M.chen
 * 2019/6/5 16:43
 */
@RunWith(SpringJUnit4ClassRunner.class)  //使用junit4进行测试
//@ContextConfiguration(locations ={ "classpath*:/evnconfigs/dev/MchtChkTest-context.xml" } )
@Slf4j
@ContextConfiguration(locations ={ "classpath*:com/scrcu/ebank/ebap/config/spring-context.xml" } )
public class OpenTest {
    private String uat = "http://10.16.1.212:8090/crm/api/";

    @Test
    public void genOffLineMerChkFile(){
        //短信发送请求报文
        OfflineCreatMerChkFileRequest request = new OfflineCreatMerChkFileRequest();
        //配置请求参数
        Map<String,Object> reqData = new HashMap<>();

//        request.setMerNo("139765100270692");
        request.setSettleDate("20190606");

        //发送请求
        IfspHttpClientUtil ifspHttpClientUtil = new IfspHttpClientUtil();
        //ifspHttpClientUtil.setHttpMethod("POST");
        ifspHttpClientUtil.setSysName("测试");
        ifspHttpClientUtil.setConnectionTimeout(10000);
        ifspHttpClientUtil.setReadTimeOut(20000);
        ifspHttpClientUtil.setContentType("http");
        ifspHttpClientUtil.setEncoding("utf-8");
        ifspHttpClientUtil.setUrl(uat+"001.genOffLineMerChkFile");
        //创建链接
        ifspHttpClientUtil.createConnection();
        //发送报文
        int code = ifspHttpClientUtil.send(IfspFastJsonUtil.tojson(request));
        System.out.println("code:" + code);
        String respData = ifspHttpClientUtil.getRespData();
        System.out.println("返回报文:" + respData);
    }

    @Test
    public void qryFileName(){
        //短信发送请求报文
        GetFileNameRequest request = new GetFileNameRequest();
        //配置请求参数
        request.setClientId("ebap-test");
        request.setMchtNo("139765100270692");
        request.setSettleDate("20190605");

        //发送请求
        IfspHttpClientUtil ifspHttpClientUtil = new IfspHttpClientUtil();
        //ifspHttpClientUtil.setHttpMethod("POST");
        ifspHttpClientUtil.setSysName("测试");
        ifspHttpClientUtil.setConnectionTimeout(10000);
        ifspHttpClientUtil.setReadTimeOut(20000);
        ifspHttpClientUtil.setContentType("http");
        ifspHttpClientUtil.setEncoding("utf-8");
        ifspHttpClientUtil.setUrl(uat+"qryFileName");
        //创建链接
        ifspHttpClientUtil.createConnection();
        //发送报文
        int code = ifspHttpClientUtil.send(IfspFastJsonUtil.tojson(request));
        System.out.println("code:" + code);
        String respData = ifspHttpClientUtil.getRespData();
        System.out.println("返回报文:" + respData);
    }

    //数据抽取
    @Test
    public void qryFileName2() {
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("settleDate", "20180904");
        params.put("merNo", "139765100270699");
        DubboServiceUtil.invokeDubboService(params, "qryFileName");
    }
    @Test
    public void genOffLineMerChkFile2() {
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("settleDate", "20180904");
        params.put("merNo", "106765100270584");
        DubboServiceUtil.invokeDubboService(params, "001.genOffLineMerChkFile");
    }

    @Resource
    private BthMerInAccDao bthMerInAccDao;
    @Test
    public void genOffLineMerChkFile3() {
        List<String> txnSsnList = new ArrayList<>();
        txnSsnList.add("20200427194815292745991000126535");
        Map<String, Object> map = new HashMap();
        map.put("handState", Constans.HANDLE_STATE_IN);//01
        map.put("handlemark", "处理中");//处理中
        map.put("otherSelType", Constans.OTHER_SEL_TYPE_IN_SUCC);//已受理
        map.put("txnSsnList", txnSsnList);
        //更新受理结果
        bthMerInAccDao.update("updateOtherMerInAccBatch", map);
    }
}
